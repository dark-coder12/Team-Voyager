GitHub and GraphQL

GitHub first announced the shift towards GraphQL back in 2016, as mentioned in their announcement post. 
https://github.blog/2016-09-14-the-github-graphql-api/

“GitHub chose GraphQL because it offers significantly more flexibility for our integrators. The ability to define precisely the data you want—and only the data you want—is a powerful advantage over traditional REST API endpoints. GraphQL lets you replace multiple REST requests with a single call to fetch the data you specify.”

This section of the documentation research focuses on how to set up GraphQL Integration and be able to make requests for GitHub’s features.


2. Root Endpoint

To access GitHub’s API, the following exact endpoint has to be used: https://api.github.com/graphql

3. Tools

GitHub recommends using GraphQL explorer to make GraphQL calls. GraphQL requests are always made using JSON bodies, so if you’re using HTTP instead of explorer, the HTTP verb always remains POST. The differentiation amongst requests is made by either using queries or mutations.


4. Parts of GraphQL

Query: Queries are similar to GET Requests, that are just used to fetch data from the API rather than mutate it. To specify a query, fields till the last level of nesting must be specified to get only the request data.
query {
  JSON-OBJECT-TO-RETURN
}


Mutation: Mutations involve changing data, and thus perform actions similar to POST / PATCH and DELETE. This involves mutation of already existing data.
Mutation name, input object, and payload object are required to formulate a mutation.
mutation {
  MUTATION-NAME(input: {MUTATION-NAME-INPUT!}) {
    MUTATION-NAME-PAYLOAD
  }
}


Query Scenario

Find 20 recently closed issues, and list their title, URL and first five labels.

query {
  repository(owner:"octocat", name:"Hello-World") {
    issues(last:20, states:CLOSED) {
      edges {
        node {
          title
          url
          labels(first:5) {
            edges {
              node {
                name
              }
            }
          }
        }
      }
    }
  }
}

Mutation Scenario

The following scenario will first fetch the issue ID of “Hello World” Repository and add an emoji reaction to the issue.
query FindIssueID {
  repository(owner:"octocat", name:"Hello-World") {
    issue(number:349) {
      id
    }
  }
}

mutation AddReactionToIssue {
  addReaction(input:{subjectId:"MDU6SXNzdWUyMzEzOTE1NTE=",content:HOORAY}) {
    reaction {
      content
    }
    subject {
      id
    }
  }
}

The response for this mutation is as follows: 

{
  "data": {
    "addReaction": {
      "reaction": {
        "content": "HOORAY"
      },
      "subject": {
        "id": "MDU6SXNzdWUyMTc5NTQ0OTc="
      }
    }
  }
}

5. Schema Retrospection
To further aid users, GitHub suggests querying a GraphQL schema to get more information about it. For instance, get details about the schema or any type of feature, using __schema or __type. The parameters are returned.
query {
  __schema {
    types {
      name
      kind
      description
      fields {
        name
      }
    }
  }
}
query {
  __type(name: "Repository") {
    name
    kind
    description
    fields {
      name
    }
  }
}

The same can be done using CURL commands.
$ curl -H "Authorization: bearer TOKEN" https://api.github.com/graphql
Note:  "message": "Bad credentials" or 401 Unauthorized is usually returned when your token is not valid.

6. Resource Limitations
A brilliant yet overlooked feature that GitHub’s GraphQL supports is resource limitation. To avoid queries / mutations that exploit server resources, there are three standards that have been put forth, which must be met by all users.
1.	Provide a first or last argument for any API request.
2.	The first or last argument must be within 1 – 100.
3.	A total of more than 500,000 nodes cannot be requested.
First or last means the number of objects that must be returned. For instance, if you’re requesting for repositories, do you want first 50, or so on. Total Nodes would mean how many times the most nested object is asked for. 

Code Reference

query {
  viewer {
    repositories(first: 50) {
      edges {
        repository:node {
          name
          issues(first: 10) {
            totalCount
            edges {
              node {
                title
                bodyHTML
              }
            }
          }
        }
      }
    }
  }
}

Calculation

50         = 50 repositories
 +
50 x 10  = 500 repository issues
= 550 total nodes

