5. Schema Retrospection
To further aid users, GitHub suggests querying a GraphQL schema to get more information about it. For instance, get details about the schema or any type of feature, using __schema or __type. The parameters are returned.
query {
  __schema {
    types {
      name
      kind
      description
      fields {
        name
      }
    }
  }
}
query {
  __type(name: "Repository") {
    name
    kind
    description
    fields {
      name
    }
  }
}

The same can be done using CURL commands.
$ curl -H "Authorization: bearer TOKEN" https://api.github.com/graphql
Note:  "message": "Bad credentials" or 401 Unauthorized is usually returned when your token is not valid.

6. Resource Limitations
A brilliant yet overlooked feature that GitHub’s GraphQL supports is resource limitation. To avoid queries / mutations that exploit server resources, there are three standards that have been put forth, which must be met by all users.
1.	Provide a first or last argument for any API request.
2.	The first or last argument must be within 1 – 100.
3.	A total of more than 500,000 nodes cannot be requested.
First or last means the number of objects that must be returned. For instance, if you’re requesting for repositories, do you want first 50, or so on. Total Nodes would mean how many times the most nested object is asked for. 

Code Reference

query {
  viewer {
    repositories(first: 50) {
      edges {
        repository:node {
          name
          issues(first: 10) {
            totalCount
            edges {
              node {
                title
                bodyHTML
              }
            }
          }
        }
      }
    }
  }
}

Calculation

50         = 50 repositories
 +
50 x 10  = 500 repository issues
= 550 total nodes

